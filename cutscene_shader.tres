[gd_resource type="VisualShader" load_steps=13 format=3 uid="uid://cpnokahpnyj0n"]

[sub_resource type="VisualShaderNodeInput" id="VisualShaderNodeInput_gthll"]
output_port_for_preview = 0
input_name = "uv"

[sub_resource type="VisualShaderNodeInput" id="VisualShaderNodeInput_34ru7"]
input_name = "texture"

[sub_resource type="VisualShaderNodeVectorOp" id="VisualShaderNodeVectorOp_upwo8"]
default_input_values = [0, Quaternion(0, 0, 0, 0), 1, Quaternion(0, 0, 0, 0)]
expanded_output_ports = [0]
op_type = 2
operator = 2

[sub_resource type="VisualShaderNodeFloatParameter" id="VisualShaderNodeFloatParameter_4btp1"]
parameter_name = "amount"
hint = 1
max = 5.0
default_value_enabled = true
default_value = 1.0

[sub_resource type="VisualShaderNodeExpression" id="VisualShaderNodeExpression_wxv8i"]
output_port_for_preview = 0
size = Vector2(760, 560)
expression = "vec2 center = vec2(0.5,0.5);
vec2 direction = screen_uv - center;
float max_distance = distance(vec2(0,0), center);

float orig_x = screen_uv.x;
float orig_y = screen_uv.y;

float warp_displacement = (max_distance - distance(screen_uv, center));

float offset_x = orig_x + direction.x * warp_displacement * amount;
float offset_y = orig_y + direction.y * warp_displacement * amount;

float x = offset_x;
float y = offset_y;

x = clamp(x, 0.,1.);
y = clamp(y, 0.,1.);

output_uv = vec2(x,y);"

[sub_resource type="VisualShaderNodeColorParameter" id="VisualShaderNodeColorParameter_4vntg"]
output_port_for_preview = 4
expanded_output_ports = [0]
parameter_name = "multiply"
default_value_enabled = true

[sub_resource type="VisualShaderNodeTexture2DParameter" id="VisualShaderNodeTexture2DParameter_5lm02"]
parameter_name = "Texture2DParameter"
texture_filter = 1
texture_repeat = 2
texture_source = 1

[sub_resource type="VisualShaderNodeTexture" id="VisualShaderNodeTexture_rc2fj"]
output_port_for_preview = 0
source = 5

[sub_resource type="VisualShaderNodeInput" id="VisualShaderNodeInput_evvcw"]
output_port_for_preview = 0
input_name = "screen_uv"

[sub_resource type="VisualShaderNodeIf" id="VisualShaderNodeIf_04cdq"]
default_input_values = [0, 0.0, 1, 1.0, 2, 1e-05, 3, Vector3(0, 0, 0), 4, Vector3(0, 0, 0), 5, Vector3(0, 0, 0)]
expanded_output_ports = [0]

[sub_resource type="VisualShaderNodeBooleanParameter" id="VisualShaderNodeBooleanParameter_gtush"]
parameter_name = "Warp"
default_value_enabled = true

[sub_resource type="VisualShaderNodeTexture" id="VisualShaderNodeTexture_om2ms"]
output_port_for_preview = 0
source = 5

[resource]
code = "shader_type canvas_item;
render_mode blend_mix;

uniform bool Warp = false;
uniform float amount : hint_range(0, 5) = 1;
uniform sampler2D Texture2DParameter : filter_nearest, repeat_disable, hint_screen_texture;
uniform vec4 multiply : source_color = vec4(1.000000, 1.000000, 1.000000, 1.000000);



void fragment() {
// BooleanParameter:8
	bool n_out8p0 = Warp;


// Input:5
	vec2 n_out5p0 = SCREEN_UV;


// FloatParameter:15
	float n_out15p0 = amount;


	vec2 n_out17p0;
// Expression:17
	n_out17p0 = vec2(0.0, 0.0);
	{
		vec2 center = vec2(0.5,0.5);
		vec2 direction = n_out5p0 - center;
		float max_distance = distance(vec2(0,0), center);
		
		float orig_x = n_out5p0.x;
		float orig_y = n_out5p0.y;
		
		float warp_displacement = (max_distance - distance(n_out5p0, center));
		
		float offset_x = orig_x + direction.x * warp_displacement * n_out15p0;
		float offset_y = orig_y + direction.y * warp_displacement * n_out15p0;
		
		float x = offset_x;
		float y = offset_y;
		
		x = clamp(x, 0.,1.);
		y = clamp(y, 0.,1.);
		
		n_out17p0 = vec2(x,y);
	}


	vec4 n_out4p0;
// Texture2D:4
	n_out4p0 = texture(Texture2DParameter, n_out17p0);


// Input:10
	vec2 n_out10p0 = UV;


	vec4 n_out9p0;
// Texture2D:9
	n_out9p0 = texture(TEXTURE, n_out10p0);


	vec3 n_out6p0;
// If:6
	float n_in6p1 = 1.00000;
	float n_in6p2 = 0.00001;
	vec3 n_in6p4 = vec3(0.00000, 0.00000, 0.00000);
	if(abs((n_out8p0 ? 1.0 : 0.0) - n_in6p1) < n_in6p2)
	{
		n_out6p0 = vec3(n_out4p0.xyz);
	}
	else if((n_out8p0 ? 1.0 : 0.0) < n_in6p1)
	{
		n_out6p0 = vec3(n_out9p0.xyz);
	}
	else
	{
		n_out6p0 = n_in6p4;
	}


// ColorParameter:18
	vec4 n_out18p0 = multiply;
	float n_out18p4 = n_out18p0.a;


// VectorOp:14
	vec4 n_out14p0 = vec4(n_out6p0, 0.0) * n_out18p0;


// Output:0
	COLOR.rgb = vec3(n_out14p0.xyz);
	COLOR.a = n_out18p4;


}
"
graph_offset = Vector2(-273.369, -200.234)
mode = 1
flags/light_only = false
nodes/fragment/0/position = Vector2(2260, 20)
nodes/fragment/2/node = SubResource("VisualShaderNodeTexture2DParameter_5lm02")
nodes/fragment/2/position = Vector2(-620, -260)
nodes/fragment/4/node = SubResource("VisualShaderNodeTexture_rc2fj")
nodes/fragment/4/position = Vector2(240, -140)
nodes/fragment/5/node = SubResource("VisualShaderNodeInput_evvcw")
nodes/fragment/5/position = Vector2(-840, -920)
nodes/fragment/6/node = SubResource("VisualShaderNodeIf_04cdq")
nodes/fragment/6/position = Vector2(1400, -220)
nodes/fragment/8/node = SubResource("VisualShaderNodeBooleanParameter_gtush")
nodes/fragment/8/position = Vector2(1100, -340)
nodes/fragment/9/node = SubResource("VisualShaderNodeTexture_om2ms")
nodes/fragment/9/position = Vector2(-100, 600)
nodes/fragment/10/node = SubResource("VisualShaderNodeInput_gthll")
nodes/fragment/10/position = Vector2(-600, 380)
nodes/fragment/11/node = SubResource("VisualShaderNodeInput_34ru7")
nodes/fragment/11/position = Vector2(-560, 660)
nodes/fragment/14/node = SubResource("VisualShaderNodeVectorOp_upwo8")
nodes/fragment/14/position = Vector2(2000, -120)
nodes/fragment/15/node = SubResource("VisualShaderNodeFloatParameter_4btp1")
nodes/fragment/15/position = Vector2(-780, -640)
nodes/fragment/17/node = SubResource("VisualShaderNodeExpression_wxv8i")
nodes/fragment/17/position = Vector2(-300, -840)
nodes/fragment/17/size = Vector2(760, 560)
nodes/fragment/17/input_ports = "0,3,screen_uv;1,0,amount;"
nodes/fragment/17/output_ports = "0,3,output_uv;"
nodes/fragment/17/expression = "vec2 center = vec2(0.5,0.5);
vec2 direction = screen_uv - center;
float max_distance = distance(vec2(0,0), center);

float orig_x = screen_uv.x;
float orig_y = screen_uv.y;

float warp_displacement = (max_distance - distance(screen_uv, center));

float offset_x = orig_x + direction.x * warp_displacement * amount;
float offset_y = orig_y + direction.y * warp_displacement * amount;

float x = offset_x;
float y = offset_y;

x = clamp(x, 0.,1.);
y = clamp(y, 0.,1.);

output_uv = vec2(x,y);"
nodes/fragment/18/node = SubResource("VisualShaderNodeColorParameter_4vntg")
nodes/fragment/18/position = Vector2(1400, 40)
nodes/fragment/connections = PackedInt32Array(2, 0, 4, 2, 8, 0, 6, 0, 4, 0, 6, 3, 9, 0, 6, 5, 10, 0, 9, 0, 11, 0, 9, 2, 5, 0, 17, 0, 17, 0, 4, 0, 15, 0, 17, 1, 6, 0, 14, 0, 14, 0, 0, 0, 18, 0, 14, 1, 18, 4, 0, 1)
